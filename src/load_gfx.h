#ifndef ZELDA3_LOAD_GFX_H_
#define ZELDA3_LOAD_GFX_H_

enum {
  kSrmOffs_Gloves = 0x354,
  kSrmOffs_Sword = 0x359,
  kSrmOffs_Shield = 0x35a,
  kSrmOffs_Armor = 0x35b,
  kSrmOffs_DiedCounter = 0x405,
  kSrmOffs_Name = 0x3d9,
  kSrmOffs_Health = 0x36c,
};

extern uint16 kGlovesColor[2];

void ApplyPaletteFilter_bounce(void);
void PaletteFilter_Range(int from, int to);
void PaletteFilter_IncrCountdown(void);
uint8 *LoadItemAnimationGfxOne(uint8 *dst, int num, int r12, bool from_temp);
uint16 snes_divide(uint16 dividend, uint8 divisor);
void EraseTileMaps_normal(void);
void RecoverPegGFXFromMapping(void);
void LoadOverworldMapPalette(void);
void EraseTileMaps_triforce(void);
void EraseTileMaps_dungeonmap(void);
void EraseTileMaps(uint16 r2, uint16 r0);
void EnableForceBlank(void);
void LoadItemGFXIntoWRAM4BPPBuffer(void);
void DecompressSwordGraphics(void);
void DecompressShieldGraphics(void);
void DecompressAnimatedDungeonTiles(uint8 a);
void DecompressAnimatedOverworldTiles(uint8 a);
void LoadItemGFX_Auxiliary(void);
void LoadFollowerGraphics(void);
void WriteTo4BPPBuffer_at_7F4000(uint8 a);
void DecodeAnimatedSpriteTile_variable(uint8 a);
void Expand3To4High(uint8 *dst, const uint8 *src, const uint8 *base, int num);
void LoadTransAuxGFX(void);
void LoadTransAuxGFX_sprite(void);
void Gfx_LoadSpritesInner(uint8 *dst);
void ReloadPreviouslyLoadedSheets(void);
void Attract_DecompressStoryGFX(void);
void AnimateMirrorWarp(void);
void AnimateMirrorWarp_DecompressNewTileSets(void);
void Graphics_IncrementalVRAMUpload(void);
void PrepTransAuxGfx(void);
void Do3To4High16Bit(uint8 *dst, const uint8 *src, int num);
void Do3To4Low16Bit(uint8 *dst, const uint8 *src, int num);
void LoadNewSpriteGFXSet(void);
void InitializeTilesets(void);
void LoadDefaultGraphics(void);
void Attract_LoadBG3GFX(void);
void Graphics_LoadChrHalfSlot(void);
void TransferFontToVRAM(void);
void Do3To4High(uint16 *vram_ptr, const uint8 *decomp_addr);
void Do3To4Low(uint16 *vram_ptr, const uint8 *decomp_addr);
void LoadSpriteGraphics(uint16 *vram_ptr, int gfx_pack, uint8 *decomp_addr);
void LoadBackgroundGraphics(uint16 *vram_ptr, int gfx_pack, int slot, uint8 *decomp_addr);
void LoadCommonSprites(void);
int Decomp_spr(uint8 *dst, int gfx);
int Decomp_bg(uint8 *dst, int gfx);
int Decompress(uint8 *dst, const uint8 *src);
void ResetHUDPalettes4and5(void);
void PaletteFilterHistory(void);
void PaletteFilter_WishPonds(void);
void PaletteFilter_Crystal(void);
void PaletteFilter_WishPonds_Inner(void);
void PaletteFilter_RestoreSP5F(void);
void PaletteFilter_SP5F(void);
void KholdstareShell_PaletteFiltering(void);
void AgahnimWarpShadowFilter(int k);
void Palette_FadeIntroOneStep(void);
void Palette_FadeIntro2(void);
void PaletteFilter_RestoreAdditive(int from, int to);
void PaletteFilter_RestoreSubtractive(uint16 from, uint16 to);
void PaletteFilter_InitializeWhiteFilter(void);
void MirrorWarp_RunAnimationSubmodules(void);
void PaletteFilter_BlindingWhite(void);
void PaletteFilter_StartBlindingWhite(void);
void PaletteFilter_BlindingWhiteTriforce(void);
void PaletteFilter_WhirlpoolBlue(void);
void PaletteFilter_IsolateWhirlpoolBlue(void);
void PaletteFilter_WhirlpoolRestoreBlue(void);
void PaletteFilter_WhirlpoolRestoreRedGreen(void);
void PaletteFilter_RestoreBGSubstractiveStrict(void);
void PaletteFilter_RestoreBGAdditiveStrict(void);
void Trinexx_FlashShellPalette_Red(void);
void Trinexx_UnflashShellPalette_Red(void);
void Trinexx_FlashShellPalette_Blue(void);
void Trinexx_UnflashShellPalette_Blue(void);
void IrisSpotlight_close(void);
void Spotlight_open(void);
void SpotlightInternal(uint8 x, uint8 y);
void IrisSpotlight_ConfigureTable(void);
void IrisSpotlight_ResetTable(void);
uint16 IrisSpotlight_CalculateCircleValue(uint8 a);
void AdjustWaterHDMAWindow(void);
void AdjustWaterHDMAWindow_X(uint16 r10);
void FloodDam_PrepFloodHDMA(void);
void ResetStarTileGraphics(void);
void Dungeon_RestoreStarTileChr(void);
void LinkZap_HandleMosaic(void);
void Player_SetCustomMosaicLevel(uint8 a);
void Module07_16_UpdatePegs_Step1(void);
void Module07_16_UpdatePegs_Step2(void);
void Dungeon_UpdatePegGFXBuffer(int x, int y);
void Dungeon_HandleTranslucencyAndPalette(void);
void Overworld_LoadAllPalettes(void);
void Dungeon_LoadPalettes(void);
void Overworld_LoadPalettesInner(void);
void OverworldLoadScreensPaletteSet(void);
void Overworld_LoadAreaPalettesEx(uint8 x);
void SpecialOverworld_CopyPalettesToCache(void);
void Overworld_CopyPalettesToCache(void);
void Overworld_LoadPalettes(uint8 bg, uint8 spr);
void Palette_BgAndFixedColor_Black(void);
void Palette_SetBgAndFixedColor(uint16 color);
void SetBackdropcolorBlack(void);
void Palette_SetOwBgColor(void);
void Palette_SpecialOw(void);
uint16 Palette_GetOwBgColor(void);
void Palette_AssertTranslucencySwap(void);
void Palette_SetTranslucencySwap(bool v);
void Palette_RevertTranslucencySwap(void);
void LoadActualGearPalettes(void);
void Palette_ElectroThemedGear(void);
void LoadGearPalettes_bunny(void);
void LoadGearPalettes(uint8 sword, uint8 shield, uint8 armor);
void LoadGearPalette(int dst, const uint16 *src, int n);
void Filter_Majorly_Whiten_Bg(void);
uint16 Filter_Majorly_Whiten_Color(uint16 c);
void Palette_Restore_BG_From_Flash(void);
void Palette_Restore_Coldata(void);
void Palette_Restore_BG_And_HUD(void);
void Palette_Load_Sp0L(void);
void Palette_Load_SpriteMain(void);
void Palette_Load_Sp5L(void);
void Palette_Load_Sp6L(void);
void Palette_Load_Sword(void);
void Palette_Load_Shield(void);
void Palette_Load_SpriteEnvironment(void);
void Palette_Load_SpriteEnvironment_Dungeon(void);
void Palette_MiscSprite_Outdoors(void);
void Palette_Load_DungeonMapSprite(void);
void Palette_Load_LinkArmorAndGloves(void);
void Palette_UpdateGlovesColor(void);
void Palette_Load_DungeonMapBG(void);
void Palette_Load_HUD(void);
void Palette_Load_DungeonSet(void);
void Palette_Load_OWBG3(void);
void Palette_Load_OWBGMain(void);
void Palette_Load_OWBG1(void);
void Palette_Load_OWBG2(void);
void Palette_LoadSingle(const uint16 *src, int dst, int x_ents);
void Palette_LoadMultiple(const uint16 *src, int dst, int x_ents, int y_pals);
void Palette_LoadMultiple_Arbitrary(const uint16 *src, int dst, int x_ents);
void Palette_LoadForFileSelect(void);
void Palette_LoadForFileSelect_Armor(int k, uint8 armor, uint8 gloves);
void Palette_LoadForFileSelect_Sword(int k, uint8 sword);
void Palette_LoadForFileSelect_Shield(int k, uint8 shield);
void Palette_LoadAgahnim(void);
void HandleScreenFlash(void);

#endif // ZELDA3_LOAD_GFX_H_
